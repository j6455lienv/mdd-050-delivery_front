{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ipi-mdd-050-web/tests/app.lint-test.js","ipi-mdd-050-web/tests/helpers/destroy-app.js","ipi-mdd-050-web/tests/helpers/module-for-acceptance.js","ipi-mdd-050-web/tests/helpers/resolver.js","ipi-mdd-050-web/tests/helpers/start-app.js","ipi-mdd-050-web/tests/test-helper.js","ipi-mdd-050-web/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ipi-mdd-050-web/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n16:15 - \\'type\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/employes/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/employes/detail.js should pass ESLint\\n\\n5:9 - \\'Ember\\' is not defined. (no-undef)\\n28:28 - \\'error\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('controllers/employes/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/employes/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/employes/liste.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/employes/liste.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/commercial.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/commercial.js should pass ESLint\\n\\n4:14 - \\'DS\\' is not defined. (no-undef)\\n5:17 - \\'DS\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('models/employe.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/employe.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/technicien.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/technicien.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n6:12 - \\'Ember\\' is not defined. (no-undef)\\n6:64 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/employes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/employes.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/employes/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/employes/detail.js should pass ESLint\\n\\n32:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/employes/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/employes/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/employes/liste.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/employes/liste.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass ESLint\\n\\n61:31 - \\'options\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/commercial.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/commercial.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/technicien.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/technicien.js should pass ESLint\\n\\n');\n  });\n});","define('ipi-mdd-050-web/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('ipi-mdd-050-web/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ipi-mdd-050-web/tests/helpers/start-app', 'ipi-mdd-050-web/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('ipi-mdd-050-web/tests/helpers/resolver', ['exports', 'ipi-mdd-050-web/resolver', 'ipi-mdd-050-web/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('ipi-mdd-050-web/tests/helpers/start-app', ['exports', 'ipi-mdd-050-web/app', 'ipi-mdd-050-web/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ipi-mdd-050-web/tests/test-helper', ['ipi-mdd-050-web/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('ipi-mdd-050-web/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('ipi-mdd-050-web/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingstHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;","file":"tests.js"}